<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\SpeedifyCliWrapper\bin\Debug\net45\SpeedifyCliWrapper.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="SpeedifyCliWrapper.Modules" #>
<#@ import namespace="SpeedifyCliWrapper.ReturnTypes" #>
<#@ import namespace="Microsoft.CSharp"#>
<#@ import namespace="System.CodeDom"#>
<#@ output extension=".cs" #>
<#
	List<MethodInfo> methods = typeof(Adapter).GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(mi => mi.GetParameters().Any() && mi.GetParameters().First().ParameterType == typeof(SpeedifyAdapter)).ToList();
	var compiler = new CSharpCodeProvider();
#>
namespace SpeedifyCliWrapper.ReturnTypes
{
    public partial class SpeedifyAdapter
    {
<# foreach(var method in methods) 
		{
		
		var parameters = method.GetParameters().ToArray();
#>
		public <#= method.ReturnType.Name#> <#= method.Name#> (<#for(int i = 0; i < parameters.Length ; i++) { #><#= compiler.GetTypeOutput(new CodeTypeReference(parameters[i].ParameterType)) #> <#= parameters[i].Name #><# if (i != parameters.Length - 1) { Write(", "); }}#>)
		{
			return this._wrapper.Adapter.<#=method.Name#>(<#for(int i = 0; i < parameters.Length ; i++) { #><#= parameters[i].Name #><# if (i != parameters.Length - 1) { Write(", "); }}#>);
		}

<#}#>
	}
}

